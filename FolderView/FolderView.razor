@namespace SimpleComponents
@typeparam T

<div class="folders">
    @if (ShowRootFolder)
    {
        <div class="root-folder"
             ondragover="event.preventDefault();"
             @ondrop="@(async (e) => await OnDropFolder(e, new(){ Level = 0 }))">
            @if (IconType != FolderIconType.None)
            {
                <i class="me-2@(IconType == FolderIconType.Folder ? Folders.Any() ? " pth-folder-icon" : " pth-empty-folder-icon" : " pth-icon-down")"></i>
            }
            <span>...</span>
        </div>
    }
    <div style="@(ShowRootFolder ? "padding-left: 1.5rem; margin-top: 0.5rem": "")">
        @foreach (var item in GetFoldersByLevel(1))
        {
            <div class="folder-level-1"
                 @onclick="async () => await OnFolderClicked(item)" role="button"
                 ondragover="event.preventDefault();"
                 @ondrag="@((e) => OnFolderDragged(e, item))"
                 @ondrop="@(async (e) => await OnDropFolder(e, item))"
                 draggable="@(OnDragAndDropFolder.HasDelegate ? "true" : "false")">
                @if (FolderTemplate != null)
                {
                    @FolderTemplate(item.Data)
                }
                else
                {
                    @if (IconType != FolderIconType.None)
                    {
                        <i class="me-2@(IconType == FolderIconType.Folder ? item.IsExpanded ? GetFoldersAtNextLevel(item.Id, item.Level).Any() ? " pth-folder-icon" : " pth-empty-folder-icon" : " pth-closed-folder-icon" : item.IsExpanded ? " pth-icon-down" : " pth-icon-right")"></i>
                    }
                    <span>@((MarkupString)item.Content)</span>
                }
            </div>
            @if (item.IsExpanded)
            {
                if (GetFoldersAtNextLevel(item.Id, 1).Any())
                {
                    <CascadingValue Value="@OnFolderClick">
                        <CascadingValue Value="@FolderTemplate">
                            <CascadingValue Value="@IconType">
                                <CascadingValue Value="@EmptyText">
                                    <CascadingValue Value="@DragModel">
                                        <CascadingValue Value="@OnDragAndDropFolder">
                                            <FolderItem T="T" ParentId="item.Id" Folders="Folders.Where(x => x.Level > 1).ToList()" OnLowerLevelDrag="OnLowerLevelDrag" />
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                }
                else
                {
                    <div class="folder-empty" style="--level: @(item.Level + 1)">@EmptyText</div>
                }
            }
        }
    </div>
</div>